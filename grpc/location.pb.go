// Code generated by protoc-gen-go. DO NOT EDIT.
// source: location.proto

package gservice

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("location.proto", fileDescriptor_4f0f35158dcf9f2c) }

var fileDescriptor_4f0f35158dcf9f2c = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcf, 0x4a, 0xc3, 0x40,
	0x10, 0xc6, 0x6f, 0xa5, 0x6e, 0xff, 0x88, 0x53, 0xaa, 0xb2, 0x88, 0x8f, 0xd0, 0x83, 0x05, 0x41,
	0x41, 0x34, 0x54, 0x8b, 0x87, 0x1e, 0xa4, 0x7d, 0x82, 0xb5, 0x4c, 0xca, 0xc2, 0xd2, 0xad, 0xbb,
	0xd3, 0x42, 0x9e, 0xd1, 0x97, 0x92, 0xee, 0x1f, 0xb3, 0x26, 0x69, 0x0e, 0x1e, 0xf3, 0x7d, 0xf3,
	0xfd, 0x66, 0x32, 0x93, 0xb0, 0xa1, 0xd2, 0x6b, 0x41, 0x52, 0x6f, 0x27, 0x3b, 0xa3, 0x49, 0x43,
	0x77, 0x63, 0xd1, 0x1c, 0xe4, 0x1a, 0xf9, 0xd0, 0xe0, 0xd7, 0x1e, 0x2d, 0x59, 0xef, 0xf0, 0x73,
	0x83, 0x76, 0xa7, 0xb7, 0x16, 0xa3, 0x30, 0x58, 0xeb, 0xfd, 0x96, 0x4c, 0xe1, 0x1f, 0xef, 0xbe,
	0x3b, 0xac, 0xb7, 0x08, 0xb0, 0xe5, 0xc7, 0x0c, 0x9e, 0x59, 0x3f, 0x53, 0x6a, 0xe6, 0x6a, 0x24,
	0x5a, 0xb8, 0x9e, 0x44, 0xf4, 0x64, 0x2e, 0x15, 0xa1, 0x89, 0xc5, 0x7c, 0x5c, 0x3a, 0xbe, 0xbc,
	0x58, 0x48, 0x4b, 0xf0, 0xc8, 0xce, 0x32, 0xa5, 0x56, 0x24, 0xa8, 0x35, 0x3d, 0x2a, 0x1d, 0x57,
	0xeb, 0xb2, 0x0f, 0x2e, 0x3b, 0x93, 0xd4, 0xde, 0x19, 0x92, 0xce, 0x92, 0x7c, 0xdb, 0x17, 0x37,
	0x77, 0x2c, 0x69, 0x4b, 0x5f, 0x96, 0x4e, 0xd4, 0x1c, 0x21, 0x63, 0x83, 0x63, 0x73, 0x41, 0xb8,
	0xd1, 0xcd, 0xaf, 0x1e, 0xbc, 0x22, 0x45, 0x44, 0xcd, 0x21, 0x96, 0x0c, 0x4a, 0x44, 0xf1, 0x8a,
	0x24, 0xa4, 0xb2, 0x70, 0x7b, 0x8a, 0xe3, 0x0b, 0xf8, 0x4d, 0x9d, 0xe6, 0x1d, 0xc7, 0x7c, 0x62,
	0xbd, 0x4c, 0xa9, 0x39, 0x0a, 0xda, 0x1b, 0xb4, 0x70, 0x55, 0x85, 0x05, 0x27, 0x3d, 0x47, 0x90,
	0x5c, 0xfc, 0x8d, 0x8d, 0x92, 0xbd, 0xfc, 0x1b, 0x73, 0xcf, 0xba, 0xfe, 0xaa, 0x79, 0x0e, 0xe3,
	0x6a, 0xd6, 0xc9, 0x95, 0x8b, 0xe6, 0x79, 0xc8, 0xf5, 0x57, 0xe2, 0x80, 0xb1, 0x3f, 0x40, 0x7d,
	0xf9, 0xbc, 0x41, 0x83, 0x29, 0xeb, 0x1d, 0x73, 0x61, 0x04, 0xb8, 0xa8, 0x4d, 0xc5, 0xeb, 0x12,
	0xbc, 0x33, 0x38, 0x86, 0xfe, 0x2e, 0x31, 0x3d, 0x63, 0x65, 0xf1, 0x27, 0x9d, 0x38, 0x76, 0x54,
	0xd3, 0xb1, 0x7f, 0x3f, 0x82, 0x06, 0xed, 0xb3, 0xe3, 0x7e, 0xaa, 0xe9, 0x4f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x95, 0x33, 0x85, 0x25, 0xa0, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LocationRPCClient is the client API for LocationRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LocationRPCClient interface {
	// List methods
	AllCountries(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*CountryList, error)
	AllStates(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*StateList, error)
	AllCities(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*CityList, error)
	AllLocations(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*LocationList, error)
	AllCategories(ctx context.Context, in *FilterCategory, opts ...grpc.CallOption) (*CategoryList, error)
	AllCategoryDetails(ctx context.Context, in *FilterCategoryDetail, opts ...grpc.CallOption) (*CategoryDetailList, error)
	AllFeatures(ctx context.Context, in *FilterFeature, opts ...grpc.CallOption) (*FeatureList, error)
	AllLocationFeatures(ctx context.Context, in *FilterFeature, opts ...grpc.CallOption) (*FeatureList, error)
	AllStaff(ctx context.Context, in *FilterStaff, opts ...grpc.CallOption) (*StaffList, error)
	// Write methods
	SaveLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error)
	SaveFeature(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Feature, error)
	SaveCategoryDetail(ctx context.Context, in *CategoryDetail, opts ...grpc.CallOption) (*CategoryDetail, error)
	SaveCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error)
}

type locationRPCClient struct {
	cc *grpc.ClientConn
}

func NewLocationRPCClient(cc *grpc.ClientConn) LocationRPCClient {
	return &locationRPCClient{cc}
}

func (c *locationRPCClient) AllCountries(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*CountryList, error) {
	out := new(CountryList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllCountries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllStates(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*StateList, error) {
	out := new(StateList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllStates", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllCities(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*CityList, error) {
	out := new(CityList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllCities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllLocations(ctx context.Context, in *FilterLocation, opts ...grpc.CallOption) (*LocationList, error) {
	out := new(LocationList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllLocations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllCategories(ctx context.Context, in *FilterCategory, opts ...grpc.CallOption) (*CategoryList, error) {
	out := new(CategoryList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllCategoryDetails(ctx context.Context, in *FilterCategoryDetail, opts ...grpc.CallOption) (*CategoryDetailList, error) {
	out := new(CategoryDetailList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllCategoryDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllFeatures(ctx context.Context, in *FilterFeature, opts ...grpc.CallOption) (*FeatureList, error) {
	out := new(FeatureList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllLocationFeatures(ctx context.Context, in *FilterFeature, opts ...grpc.CallOption) (*FeatureList, error) {
	out := new(FeatureList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllLocationFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) AllStaff(ctx context.Context, in *FilterStaff, opts ...grpc.CallOption) (*StaffList, error) {
	out := new(StaffList)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/AllStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) SaveLocation(ctx context.Context, in *Location, opts ...grpc.CallOption) (*Location, error) {
	out := new(Location)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/SaveLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) SaveFeature(ctx context.Context, in *Feature, opts ...grpc.CallOption) (*Feature, error) {
	out := new(Feature)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/SaveFeature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) SaveCategoryDetail(ctx context.Context, in *CategoryDetail, opts ...grpc.CallOption) (*CategoryDetail, error) {
	out := new(CategoryDetail)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/SaveCategoryDetail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *locationRPCClient) SaveCategory(ctx context.Context, in *Category, opts ...grpc.CallOption) (*Category, error) {
	out := new(Category)
	err := c.cc.Invoke(ctx, "/gservice.LocationRPC/SaveCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LocationRPCServer is the server API for LocationRPC service.
type LocationRPCServer interface {
	// List methods
	AllCountries(context.Context, *FilterLocation) (*CountryList, error)
	AllStates(context.Context, *FilterLocation) (*StateList, error)
	AllCities(context.Context, *FilterLocation) (*CityList, error)
	AllLocations(context.Context, *FilterLocation) (*LocationList, error)
	AllCategories(context.Context, *FilterCategory) (*CategoryList, error)
	AllCategoryDetails(context.Context, *FilterCategoryDetail) (*CategoryDetailList, error)
	AllFeatures(context.Context, *FilterFeature) (*FeatureList, error)
	AllLocationFeatures(context.Context, *FilterFeature) (*FeatureList, error)
	AllStaff(context.Context, *FilterStaff) (*StaffList, error)
	// Write methods
	SaveLocation(context.Context, *Location) (*Location, error)
	SaveFeature(context.Context, *Feature) (*Feature, error)
	SaveCategoryDetail(context.Context, *CategoryDetail) (*CategoryDetail, error)
	SaveCategory(context.Context, *Category) (*Category, error)
}

// UnimplementedLocationRPCServer can be embedded to have forward compatible implementations.
type UnimplementedLocationRPCServer struct {
}

func (*UnimplementedLocationRPCServer) AllCountries(ctx context.Context, req *FilterLocation) (*CountryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCountries not implemented")
}
func (*UnimplementedLocationRPCServer) AllStates(ctx context.Context, req *FilterLocation) (*StateList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStates not implemented")
}
func (*UnimplementedLocationRPCServer) AllCities(ctx context.Context, req *FilterLocation) (*CityList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCities not implemented")
}
func (*UnimplementedLocationRPCServer) AllLocations(ctx context.Context, req *FilterLocation) (*LocationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllLocations not implemented")
}
func (*UnimplementedLocationRPCServer) AllCategories(ctx context.Context, req *FilterCategory) (*CategoryList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCategories not implemented")
}
func (*UnimplementedLocationRPCServer) AllCategoryDetails(ctx context.Context, req *FilterCategoryDetail) (*CategoryDetailList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllCategoryDetails not implemented")
}
func (*UnimplementedLocationRPCServer) AllFeatures(ctx context.Context, req *FilterFeature) (*FeatureList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllFeatures not implemented")
}
func (*UnimplementedLocationRPCServer) AllLocationFeatures(ctx context.Context, req *FilterFeature) (*FeatureList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllLocationFeatures not implemented")
}
func (*UnimplementedLocationRPCServer) AllStaff(ctx context.Context, req *FilterStaff) (*StaffList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllStaff not implemented")
}
func (*UnimplementedLocationRPCServer) SaveLocation(ctx context.Context, req *Location) (*Location, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLocation not implemented")
}
func (*UnimplementedLocationRPCServer) SaveFeature(ctx context.Context, req *Feature) (*Feature, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFeature not implemented")
}
func (*UnimplementedLocationRPCServer) SaveCategoryDetail(ctx context.Context, req *CategoryDetail) (*CategoryDetail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCategoryDetail not implemented")
}
func (*UnimplementedLocationRPCServer) SaveCategory(ctx context.Context, req *Category) (*Category, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveCategory not implemented")
}

func RegisterLocationRPCServer(s *grpc.Server, srv LocationRPCServer) {
	s.RegisterService(&_LocationRPC_serviceDesc, srv)
}

func _LocationRPC_AllCountries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllCountries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllCountries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllCountries(ctx, req.(*FilterLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllStates(ctx, req.(*FilterLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllCities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllCities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllCities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllCities(ctx, req.(*FilterLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllLocations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterLocation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllLocations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllLocations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllLocations(ctx, req.(*FilterLocation))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCategory)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllCategories(ctx, req.(*FilterCategory))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllCategoryDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterCategoryDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllCategoryDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllCategoryDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllCategoryDetails(ctx, req.(*FilterCategoryDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterFeature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllFeatures(ctx, req.(*FilterFeature))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllLocationFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterFeature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllLocationFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllLocationFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllLocationFeatures(ctx, req.(*FilterFeature))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_AllStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FilterStaff)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).AllStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/AllStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).AllStaff(ctx, req.(*FilterStaff))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_SaveLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).SaveLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/SaveLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).SaveLocation(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_SaveFeature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Feature)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).SaveFeature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/SaveFeature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).SaveFeature(ctx, req.(*Feature))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_SaveCategoryDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryDetail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).SaveCategoryDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/SaveCategoryDetail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).SaveCategoryDetail(ctx, req.(*CategoryDetail))
	}
	return interceptor(ctx, in, info, handler)
}

func _LocationRPC_SaveCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Category)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LocationRPCServer).SaveCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gservice.LocationRPC/SaveCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LocationRPCServer).SaveCategory(ctx, req.(*Category))
	}
	return interceptor(ctx, in, info, handler)
}

var _LocationRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gservice.LocationRPC",
	HandlerType: (*LocationRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllCountries",
			Handler:    _LocationRPC_AllCountries_Handler,
		},
		{
			MethodName: "AllStates",
			Handler:    _LocationRPC_AllStates_Handler,
		},
		{
			MethodName: "AllCities",
			Handler:    _LocationRPC_AllCities_Handler,
		},
		{
			MethodName: "AllLocations",
			Handler:    _LocationRPC_AllLocations_Handler,
		},
		{
			MethodName: "AllCategories",
			Handler:    _LocationRPC_AllCategories_Handler,
		},
		{
			MethodName: "AllCategoryDetails",
			Handler:    _LocationRPC_AllCategoryDetails_Handler,
		},
		{
			MethodName: "AllFeatures",
			Handler:    _LocationRPC_AllFeatures_Handler,
		},
		{
			MethodName: "AllLocationFeatures",
			Handler:    _LocationRPC_AllLocationFeatures_Handler,
		},
		{
			MethodName: "AllStaff",
			Handler:    _LocationRPC_AllStaff_Handler,
		},
		{
			MethodName: "SaveLocation",
			Handler:    _LocationRPC_SaveLocation_Handler,
		},
		{
			MethodName: "SaveFeature",
			Handler:    _LocationRPC_SaveFeature_Handler,
		},
		{
			MethodName: "SaveCategoryDetail",
			Handler:    _LocationRPC_SaveCategoryDetail_Handler,
		},
		{
			MethodName: "SaveCategory",
			Handler:    _LocationRPC_SaveCategory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "location.proto",
}
